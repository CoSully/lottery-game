{"version":3,"sources":["Ball.js","Lottery.js","Coin.js","CoinFlip.js","helpers.js","App.js","serviceWorker.js","index.js"],"names":["Ball","react_default","a","createElement","className","this","props","num","Component","Lottery","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","nums","Array","from","length","maxBalls","handleClick","bind","assertThisInitialized","_this2","setState","curState","map","n","Math","floor","random","maxNum","generate","title","src_Ball_0","onClick","defaultProps","Coin","src","info","imgSrc","alt","side","CoinFlip","currFlip","nFlips","nHeads","nTails","arr","newFlip","coins","st","flipCoin","src_Coin_0","App","src_Lottery_0","src_CoinFlip_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e9963879.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Ball.css';\r\n\r\nclass Ball extends Component {\r\n    render(){\r\n        return (\r\n            <div className='Ball'>{this.props.num}</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Ball;\r\n","import React, { Component } from 'react';\r\nimport Ball from './Ball';\r\nimport './Lottery.css';\r\n\r\nclass Lottery extends Component {\r\n    static defaultProps = {\r\n        title: 'Lotto',\r\n        maxBalls: 6,\r\n        maxNum: 40\r\n    }\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {nums: Array.from({ length: this.props.maxBalls }) };\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n    generate(){\r\n        this.setState(curState => ({\r\n            nums: curState.nums.map(n => Math.floor(Math.random() * this.props.maxNum) + 1)\r\n        }));\r\n        \r\n    }\r\n    handleClick(){\r\n        this.generate();\r\n    }\r\n    render(){\r\n        return(\r\n            <section className='Lottery'>\r\n                <h1>{this.props.title}</h1>\r\n                <div>\r\n                    {this.state.nums.map(n => <Ball num={n}/>)}\r\n                </div>\r\n                <button onClick={this.handleClick}>Generate</button>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Lottery;\r\n","import React, { Component } from 'react';\r\nimport './Coin.css';\r\n\r\nclass Coin extends Component {\r\n    render(){\r\n        return(\r\n            <div className='Coin'>\r\n                <img src={this.props.info.imgSrc} alt={this.props.info.side} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Coin;","import React, { Component } from 'react';\r\nimport Coin from './Coin';\r\nimport { choice } from './helpers';\r\nimport './CoinFlip.css';\r\n\r\nclass CoinFlip extends Component {\r\n    static defaultProps = {\r\n        coins: [\r\n            {side: 'heads', imgSrc: \"https://www.fleur-de-coin.com/images/Thumbnails/KM200-km188_2002b-SIZE250x249.jpg\"},\r\n            {side: 'tails', imgSrc: \"https://www.fleur-de-coin.com/images/Thumbnails/euroimages-ireland2euros-SIZE250x250.jpg\"}\r\n        ]\r\n    };\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currFlip: null,\r\n            nFlips: 0,\r\n            nHeads: 0,\r\n            nTails: 0\r\n        }\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n    flipCoin() {\r\n        const newFlip = choice(this.props.coins);\r\n        this.setState(st => {\r\n            return {\r\n                currFlip: newFlip,\r\n                nFlips: st.nFlips + 1,\r\n                nHeads: st.nHeads + (newFlip.side === 'heads' ? 1 : 0),\r\n                nTails: st.nTails + (newFlip.side === 'tails' ? 1 : 0) \r\n            };\r\n        });\r\n    }\r\n    handleClick(){\r\n        this.flipCoin();\r\n    }\r\n    render(){\r\n        return(\r\n            <section className='CoinFlip'>\r\n                <h1>Flip A Coin!</h1>\r\n                {this.state.currFlip && <Coin info={this.state.currFlip} />}\r\n                <button onClick={this.handleClick}>Flip</button>\r\n                <p>Out of {this.state.nFlips} flips, there have been {this.state.nHeads} heads and {this.state.nTails} tails.</p>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CoinFlip;","function choice(arr){\r\n    let randomIndex = Math.floor(Math.random() * arr.length);\r\n    return arr[randomIndex];\r\n}\r\n\r\nexport { choice };","import React, { Component } from 'react';\nimport Lottery from './Lottery';\nimport CoinFlip from './CoinFlip';\nimport './App.css';\n\nclass App extends Component {\n  render(){\n    return (\n      <div className=\"App\">\n        <Lottery />\n        <Lottery title='Mini Daily' maxNum={10} maxBalls={4} />\n        <CoinFlip />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}